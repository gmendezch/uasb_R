meanneg <- 3 # centre of the distribution of negative examples
npos <- round(n/2) # number of positive examples
nneg <- n-npos # number of negative examples
# Generate the positive and negative examples
xpos <- matrix(rnorm(npos*p,mean=meanpos,sd=sigma),npos,p)
xneg <- matrix(rnorm(nneg*p,mean=meanneg,sd=sigma),npos,p)
x <- rbind(xpos,xneg)
# Generate the labels
y <- matrix(c(rep(1,npos),rep(-1,nneg)))
# Visualize the data
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c(’Positive’,’Negative’),col=seq(2),pch=1,text.col=seq(2))
##Now we split the data into a training set (80%) and a test set (20%):
## Prepare a training and a test set ##
ntrain <- round(n*0.8) # number of training examples
tindex <- sample(n,ntrain) # indices of training samples
xtrain <- x[tindex,]
xtest <- x[-tindex,]
ytrain <- y[tindex]
ytest <- y[-tindex]
istrain=rep(0,n)
istrain[tindex]=1
# Visualize
dev.off()
plot(x,col=ifelse(y>0,1,2),pch=ifelse(istrain==1,1,2))
legend("topleft",c("Positive Train","Positive Test","Negative Train","Negative Test"),
col=c(1,1,2,2),pch=c(1,2,1,2),text.col=c(1,1,2,2))
# load the kernlab package
library(kernlab)
# train the SVM
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel="vanilladot",C=100,scaled=c())
#Look and understand what svp contains
# General summary
svp
# Attributes that you can access
attributes(svp)
# For example, the support vectors
alpha(svp)
alphaindex(svp)
b(svp)
# Use the built-in function to pretty-plot the classifier
plot(svp,data=xtrain)
# Predict labels on test
ypred = predict(svp,xtest)
table(ytest,ypred)
# Compute accuracy
sum(ypred==ytest)/length(ytest)
# Compute at the prediction scores
ypredscore = predict(svp,xtest,type="decision")
# Check that the predicted labels are the signs of the scores
table(ypredscore > 0,ypred)
# Package to compute ROC curve, precision-recall etc...
library(ROCR)
pred <- prediction(ypredscore,ytest)
# Plot ROC curve
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf)
# Plot precision/recall curve
perf <- performance(pred, measure = "prec", x.measure = "rec")
plot(perf)
# Plot accuracy as function of threshold
perf <- performance(pred, measure = "acc")
plot(perf)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
library(ROCR)
install.packages("ROCR")
#First generate a set of positive and negative examples from 2 Gaussians.
n <- 150 # number of data points
p <- 2 # dimension
sigma <- 1 # variance of the distribution
meanpos <- 0 # centre of the distribution of positive examples
meanneg <- 3 # centre of the distribution of negative examples
npos <- round(n/2) # number of positive examples
nneg <- n-npos # number of negative examples
# Generate the positive and negative examples
xpos <- matrix(rnorm(npos*p,mean=meanpos,sd=sigma),npos,p)
xneg <- matrix(rnorm(nneg*p,mean=meanneg,sd=sigma),npos,p)
x <- rbind(xpos,xneg)
# Generate the labels
y <- matrix(c(rep(1,npos),rep(-1,nneg)))
# Visualize the data
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c(’Positive’,’Negative’),col=seq(2),pch=1,text.col=seq(2))
##Now we split the data into a training set (80%) and a test set (20%):
## Prepare a training and a test set ##
ntrain <- round(n*0.8) # number of training examples
tindex <- sample(n,ntrain) # indices of training samples
xtrain <- x[tindex,]
xtest <- x[-tindex,]
ytrain <- y[tindex]
ytest <- y[-tindex]
istrain=rep(0,n)
istrain[tindex]=1
# Visualize
dev.off()
plot(x,col=ifelse(y>0,1,2),pch=ifelse(istrain==1,1,2))
legend("topleft",c("Positive Train","Positive Test","Negative Train","Negative Test"),
col=c(1,1,2,2),pch=c(1,2,1,2),text.col=c(1,1,2,2))
# load the kernlab package
library(kernlab)
# train the SVM
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel="vanilladot",C=100,scaled=c())
#Look and understand what svp contains
# General summary
svp
# Attributes that you can access
attributes(svp)
# For example, the support vectors
alpha(svp)
alphaindex(svp)
b(svp)
# Use the built-in function to pretty-plot the classifier
plot(svp,data=xtrain)
# Predict labels on test
ypred = predict(svp,xtest)
table(ytest,ypred)
# Compute accuracy
sum(ypred==ytest)/length(ytest)
# Compute at the prediction scores
ypredscore = predict(svp,xtest,type="decision")
# Check that the predicted labels are the signs of the scores
table(ypredscore > 0,ypred)
# Package to compute ROC curve, precision-recall etc...
library(ROCR)
pred <- prediction(ypredscore,ytest)
# Plot ROC curve
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf)
# Plot precision/recall curve
perf <- performance(pred, measure = "prec", x.measure = "rec")
plot(perf)
# Plot accuracy as function of threshold
perf <- performance(pred, measure = "acc")
plot(perf)
plot(perf)
library(e1071)
library(caret)
library(NLP)
library(tm)
data(iris)
iris$SpeciesClass[iris$Species=="versicolor"] <- "TRUE"
iris$SpeciesClass[iris$Species!="versicolor"] <- "FALSE"
trainPositive<-subset(iris,SpeciesClass=="TRUE")
testnegative<-subset(iris,SpeciesClass=="FALSE")
inTrain<-createDataPartition(1:nrow(trainPositive),p=0.6,list=FALSE)
trainpredictors<-trainPositive[inTrain,1:4]
trainLabels<-trainPositive[inTrain,6]
testPositive<-trainPositive[-inTrain,]
testPosNeg<-rbind(testPositive,testnegative)
testpredictors<-testPosNeg[,1:4]
testLabels<-testPosNeg[,6]
svm.model<-svm(trainpredictors,y=NULL,
type='one-classification',
nu=0.10,
scale=TRUE,
kernel="radial")
svm.predtrain<-predict(svm.model,trainpredictors)
svm.predtest<-predict(svm.model,testpredictors)
confTrain<-table(Predicted=svm.predtrain,Reference=trainLabels)
confTest<-table(Predicted=svm.predtest,Reference=testLabels)
confusionMatrix(confTest,positive='TRUE')
print(confTrain)
print(confTest)
library(e1071)
library(caret)
install.packages("caret")
library(NLP)
install.packages("NLP")
install.packages("tm")
library(e1071)
library(caret)
library(NLP)
library(tm)
data(iris)
iris$SpeciesClass[iris$Species=="versicolor"] <- "TRUE"
iris$SpeciesClass[iris$Species!="versicolor"] <- "FALSE"
trainPositive<-subset(iris,SpeciesClass=="TRUE")
testnegative<-subset(iris,SpeciesClass=="FALSE")
inTrain<-createDataPartition(1:nrow(trainPositive),p=0.6,list=FALSE)
trainpredictors<-trainPositive[inTrain,1:4]
trainLabels<-trainPositive[inTrain,6]
testPositive<-trainPositive[-inTrain,]
testPosNeg<-rbind(testPositive,testnegative)
testpredictors<-testPosNeg[,1:4]
testLabels<-testPosNeg[,6]
svm.model<-svm(trainpredictors,y=NULL,
type='one-classification',
nu=0.10,
scale=TRUE,
kernel="radial")
svm.predtrain<-predict(svm.model,trainpredictors)
svm.predtest<-predict(svm.model,testpredictors)
confTrain<-table(Predicted=svm.predtrain,Reference=trainLabels)
confTest<-table(Predicted=svm.predtest,Reference=testLabels)
confusionMatrix(confTest,positive='TRUE')
print(confTrain)
print(confTest)
library(e1071)
library(caret)
library(NLP)
library(tm)
library(e1071)
dataRaw <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data", sep=",");
summary(dataRaw)
labels <- dataRaw[,2]
data <- dataRaw[,3:32]
NObs <-  nrow(data)
NTrain <- round(NObs*0.9)
NTest <- NObs - NTrain
train <- data[1:NTrain,]
labelsTrain <- labels[1:NTrain]
test <- data[(NTrain+1):NObs,]
labelsTest <- labels[(NTrain+1):NObs]
pca <- princomp(train)
train <- predict(pca,train)[,1:2]
test <- predict(pca, test)[,1:2]
plot(train[labelsTrain=="B",1],train[labelsTrain=="B",2],col="red")
points(train[labelsTrain=="M",1],train[labelsTrain=="M",2],col="green")
points(test[labelsTest=="B",1],test[labelsTest=="B",2],col="cyan")
points(test[labelsTest=="M",1],test[labelsTest=="M",2],col="black")
trainFact=data.frame(train,y=as.factor(labelsTrain))
svmfit=svm(y~.,data=trainFact,kernel="linear",cross = 5)
print(svmfit)
out=predict(svmfit,train)
print(sum(out==labelsTrain))/NTrain
plot(svmfit,trainFact)
out=predict(svmfit,test)
print(sum(out==labelsTest))/NTest
dev.off()
demo("graphics")
update()
update.packages()
y
pandas
demo("graphics")
iris
head(iris)
demo("graphics")
x<-rnorm(50)
plot(x)
plot(x);
plot(x);
quit()
getw()
getwd()
setwd("/Users/urvog/Documents/")
getwd()
dir()
str(read.table)
data()
women
summary(women)
str(women)
table(wome)
table(women)
table(women$height)
cars
head(cars)
table(cars$speed)
head(cars)
tail(cars)
tail(cars,15)
head(cars,15)
names(cars)
install.packages(lattice)
install.packages("lattice")
install.packages("ggplot2")
installed.packages()
datos<-installed.packages()
datos
library("ggpplot2")
library("ggplot2")
library(ggplot2)
?library
help(lattice)
help(library)
example(qplot)
example("dir")
dev.off()
R.version
x<-c(1,2,3,3,5,7)
x<-c(1,"sds",4)
class(x)
class(cars)
x<-c(1,2,3,3,5,7)
class(cars)
class(x)
m<-matrix(nrow = 2, ncol = 3)
m
1:10
m<-matrix(1:6,nrow = 2, ncol = 3)
m
x<-1:3
y<-10:12
cbind(x,y)
rbind(x,y)
x<-list(1,2,"dfdfdf",:1:20)
x<-list(1,2,"dfdfdf",1:20)
x
str(x)
x<-c(1,2,4,NA,10,30)
is.na(x)
x[!is.na(x)]
x[1]
x[2]
x[!is.na(x)]
x<-data.frame( foo = 1:4, bar = c(T,T,F,F))
X
x
names(x)
table(x$bar)
str(x)
nrow(x)
ncol(x)
getwd()
setwd("//Users/urvog/Dropbox/Docencia Maestría en Software Libre UASB/3.2 Administracion y analisis de datos/Tema 3. Analisis de datos, Business Intelligence, DataScience/uasb_rminer/")
getwd()
dir()
con<-file("titanic.csv")
x<-readLines(con,10)
x
nrows(x)
str(x)
summary(x)
cars[1,]
cars[1,1]
cars[1,]
cars[,1]
graphics()
examples("graphics")
?"graphics"
graphics
demo(graphics)
dir()
getwd()
setwd("//Users/urvog/Dropbox/Docencia Maestría en Software Libre UASB/3.2 Administracion y analisis de datos/Tema 3. Analisis de datos, Business Intelligence, DataScience/uasb_R/")
dir()
getwd()
dir()
getwd()
dir()
getwd()
dir()
DataTitanic<-read.table("titanic.csv", sep = ",", header = TRUE)
names(DataTitanic)
class(DataTitanic)
str(DataTitanic)
summary(DataTitanic)
table(is.na(DataTitanic))
is.na(DataTitanic)
DataTitanic
head(DataTitanic)
table(is.na(DataTitanic))
summary(DataTitanic)
table(is.na(DataTitanic$PassengerId)) #no tiene valores vacios
table(is.na(DataTitanic$Survived)) #no tiene valores vacios
table(is.na(DataTitanic$PassengerId))
table(is.na(DataTitanic$PassengerId))
is.na(DataTitanic$Age)
DataTitanicValido<-DataTitanic[!faltantes,]
faltantes<-is.na(DataTitanic$Age)
DataTitanicValido<-DataTitanic[!faltantes,]
DataTitanicNoValido<-DataTitanic[faltantes,]
View(DataTitanicNoValido)
View(DataTitanicNoValido)
View(DataTitanicValido)
table(is.na(DataTitanicValido))
summary(DataTitanicValido)
colors()
colores
colores<-colors() #para generar aleatoriamente colores con la funcion sample
colores
table(DataTitanicValido$Pclass)
d_clase<-matrix(table(DataTitanicValido$Pclass))
d_clase
?barplot
d_clase[,1]
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
str(barplot)
args(barplot)
?barplot
colors()
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = c("tan2","tan3","tan4"))
sample(1:100)
sample(1:100,5)
sample(1:100,5)
sample(1:100,5)
sample(1:100,5)
sample(1:100,5)
sample(1:100,5)
sample(1:100,5)
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
text(bp, y = d_clase+20,labels = d_clase, xpd = TRUE)
text(bp, y = d_clase+300,labels = d_clase, xpd = TRUE)
dev.off()
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
text(bp, y = d_clase+300,labels = d_clase, xpd = TRUE)
dev.off()
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
text(bp, y = d_clase+20,labels = d_clase, xpd = TRUE)
title(main = "Cantidad de personas por clase", xlab = "Clases", ylab = "Frecuencia")
torta<-pie(d_clase, c("1ra Clase","2da Clase","3ra Clase"), col = colores[sample(1:655,3)] )
title(main = "Distribucion de personas por clase")
torta<-pie(d_clase, c("1ra Clase","2da Clase","3ra Clase"), col = colores[sample(1:655,3)] )
title(main = "Distribucion de personas por clase")
torta<-pie(d_clase, c("1ra Clase","2da Clase","3ra Clase"), col = colores[sample(1:655,3)] )
title(main = "Distribucion de personas por clase")
aggregate(Age~Pclass, DataTitanicValido,mean)
subtotal_edad<-aggregate(Age~Pclass, DataTitanicValido,mean)
bp<-barplot(subtotal_edad$Age, names.arg = subtotal_edad$Pclass, col = colores[sample(1:655,3)])
text(bp, y = round(subtotal_edad$Age,2)+4, labels = round(subtotal_edad$Age,2), xpd = TRUE)
title(main = "Promedios edad por clase", xlab = "Clases", ylab = "Promedio edad")
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
abline(lm(DataTitanicValido$Age~DataTitanicValido$Fare), col = "red")
abline(h = 200, col ="red")
abline(h = 100, col = "blue")
dev.off()
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
abline(lm(DataTitanicValido$Age~DataTitanicValido$Fare), col = "red")
abline(h = 200, col ="red")
abline(h = 100, col = "blue")
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
abline(lm(DataTitanicValido$Age~DataTitanicValido$Fare), col = "red")
abline(h = 200, col ="red")
abline(h = 100, col = "blue")
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
abline(lm(DataTitanicValido$Age~DataTitanicValido$Fare), col = "red")
abline(h = 200, col ="red")
abline(h = 100, col = "blue")
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
abline(lm(DataTitanicValido$Age~DataTitanicValido$Fare), col = "red")
abline(h = 200, col ="red")
abline(h = 100, col = "blue")
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
abline(lm(DataTitanicValido$Age~DataTitanicValido$Fare), col = "red")
abline(h = 200, col ="red")
abline(h = 100, col = "blue")
abline(v = 100, col = "green")
abline(v = 70, col = "green")
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Edad, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Edad", ylim = c(0,100))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Edad, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Edad", ylim = c(0,100))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Edad, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Edad", ylim = c(0,100))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Sexo, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Sexo", ylim = c(0,100))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Sexo, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Sexo", ylim = c(0,100))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Sexo", ylim = c(0,100))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Sexo", ylim = c(0,100))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,100))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,20))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,20))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,10))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,6))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,6))
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,6))
pairs(~DataTitanicValido$Age+DataTitanicValido$SibSp+DataTitanicValido$Fare, data = DataTitanicValido)
library(lattice)
xyplot(Fare~Age|Pclass, data = DataTitanicValido, xlab = "Costo Ticket", ylab = "Edad", main = "Graficos Lattice")
DataTitanicValido<-transform(DataTitanicValido, Pclass = factor(Pclass))
xyplot(Fare~Age|Pclass, data = DataTitanicValido, xlab = "Costo Ticket", ylab = "Edad", main = "Graficos Lattice")
xyplot(Fare~Age|Embarked, data = DataTitanicValido, xlab = "Costo Ticket", ylab = "Edad", main = "Graficos Lattice")
names(DataTitanic)
xyplot(Fare~Age|Survived, data = DataTitanicValido, xlab = "Costo Ticket", ylab = "Edad", main = "Graficos Lattice")
barchart(Age~Survived|Embarked, data = DataTitanicValido, groups = Pclass, xlab = "Costo Ticket", ylab = "Edad",
main = "Graficos Lattice", auto.key = TRUE)
dev.off()
library(ggplot2)
qplot(Fare,Age, data = DataTitanicValido, color = Pclass)
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, geom = c("point","smooth"))
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, facets = Embarked~., main = "Grafico GGPLOT")
qplot(Age, data = DataTitanicValido, fill = Pclass, facets = .~Embarked, main = "Grafico GGPLOT")
